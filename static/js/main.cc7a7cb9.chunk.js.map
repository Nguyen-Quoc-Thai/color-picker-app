{"version":3,"sources":["components/ColorPicker.js","components/SizeSetting.js","components/Reset.js","components/Result.js","App.js","serviceWorker.js","index.js"],"names":["ColorPicker","props","state","colors","color","this","onRecieveColor","elementColor","map","index","key","type","className","style","showColor","onClick","onHandleClick","Component","SizeSetting","onChangeSize","value","fontSize","Reset","onResetDefault","Result","borderColor","setStyle","App","size","getColorPicker","bind","param","setState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cc7a7cb9.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class ColorPicker extends Component {\r\n\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tcolors:['red', 'green', 'blue', 'black']\r\n\t\t};\r\n\t}\r\n\r\n\tshowColor(color){\r\n\t\treturn {\r\n\t\t\tcolor: color\r\n\t\t};\r\n\t}\r\n\r\n\r\n\tonHandleClick(color){\r\n\t\tthis.props.onRecieveColor(color);\r\n\t}\r\n\r\n\trender() {\r\n\r\n\t\tvar elementColor = this.state.colors.map((color, index) => {\r\n\t\t\treturn \t<button \r\n\t\t\t\t\tkey={index} \r\n\t\t\t\t\ttype=\"button\" \r\n\t\t\t\t\tclassName=\"btn btn-default\" \r\n\t\t\t\t\tstyle={ this.showColor(color) }\r\n\t\t\t\t\tonClick={()=>{this.onHandleClick(color)}}\r\n\t\t\t>\r\n\t\t\tClick me</button>\r\n\t\t});\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div className=\"panel panel-primary\">\r\n                    <div className=\"panel-heading\">\r\n                        <h3 className=\"panel-title\">Color picker</h3>\r\n                    </div>\r\n                    <div className=\"panel-body he-80\">\r\n                        { elementColor }\r\n                    </div>\r\n                </div>\r\n\t\t\t\t\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class SizeSetting extends Component {\r\n\r\n    onChangeSize = (value) => {\r\n        this.props.onChangeSize(value);\r\n    }\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div className=\"panel panel-warning\">\r\n                    <div className=\"panel-heading\">\r\n                        <h3 className=\"panel-title\">Size: {this.props.fontSize}px</h3>\r\n                    </div>\r\n                    <div className=\"panel-body\">\r\n                        <button type=\"button\" className=\"btn btn-success mr-10\" onClick={() => {this.onChangeSize(2)}}>Up</button>\r\n                        <button type=\"button\" className=\"btn btn-success\" onClick={() => {this.onChangeSize(-2)}}>Down</button>\r\n                    </div>\r\n                </div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class Reset extends Component {\r\n\r\n\tonResetDefault = () => {\r\n\t\tthis.props.onResetDefault();\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n                <button type=\"button\" className=\"btn btn-primary\" onClick={this.onResetDefault}>Reset</button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class Result extends Component {\r\n\r\n\tsetStyle(){\r\n\t\treturn{\r\n\t\t\tcolor: this.props.color,\r\n\t\t\tborderColor: this.props.color,\r\n\t\t\tfontSize: this.props.fontSize\r\n\t\t};\r\n\t\t\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<span className=\"label label-danger\">Color: { this.props.color } - Font size: {this.props.fontSize}px</span>\r\n\t\t\t\t<hr/>\r\n                <div className=\"content-style\" style={ this.setStyle() }>\r\n                    <p>Content color</p>\r\n                </div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React, { Component } from 'react';\nimport ColorPicker from './components/ColorPicker';\nimport SizeSetting from './components/SizeSetting';\nimport Reset from './components/Reset';\nimport Result from './components/Result';\n\nimport './App.css';\n\nexport default class App extends Component {\n\n    constructor(props){\n        super(props);\n        this.state={\n            color: 'none',\n            size: 12\n        }\n        this.getColorPicker=this.getColorPicker.bind(this);\n        this.onChangeSize=this.onChangeSize.bind(this);\n        this.onResetDefault=this.onResetDefault.bind(this);\n\n    }\n\n    getColorPicker(param){\n        this.setState({\n            color: param\n        })\n    }\n\n    onChangeSize(value){\n        if(value<0){\n            if(this.state.size>13){\n                this.setState({\n                    size:(this.state.size+value)\n                })\n            }\n        }else{\n            if(this.state.size<29){\n                this.setState({\n                    size:(this.state.size+value)\n                })\n            }\n        }\n    }\n\n    onResetDefault(){\n        this.setState({\n            size: 16\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"container mt-30\">\n                    <div className=\"row\">\n                        <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\n                            <ColorPicker onRecieveColor={this.getColorPicker}/>\n                        </div>\n                        <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\n                            <SizeSetting fontSize={this.state.size} onChangeSize={this.onChangeSize}/>\n                            <Reset onResetDefault={this.onResetDefault}/>\n                        </div>\n                        <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n                            <Result color={this.state.color} fontSize={this.state.size}/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}